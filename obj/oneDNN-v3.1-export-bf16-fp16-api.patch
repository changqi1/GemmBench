diff --git a/include/oneapi/dnnl/dnnl.h b/include/oneapi/dnnl/dnnl.h
index e7fe62c48..6283bd672 100644
--- a/include/oneapi/dnnl/dnnl.h
+++ b/include/oneapi/dnnl/dnnl.h
@@ -3537,6 +3537,30 @@ dnnl_status_t DNNL_API dnnl_gemm_s8s8s32(char transa, char transb, char offsetc,
         dnnl_dim_t lda, int8_t ao, const int8_t *B, dnnl_dim_t ldb, int8_t bo,
         float beta, int32_t *C, dnnl_dim_t ldc, const int32_t *co);
 
+dnnl_status_t DNNL_API dnnl_gemm_bf16bf16f32(char transa, char transb, dnnl_dim_t M,
+        dnnl_dim_t N, dnnl_dim_t K, float alpha, const dnnl_bfloat16_t *A,
+        dnnl_dim_t lda, const dnnl_bfloat16_t *B, dnnl_dim_t ldb, float beta,
+        float *C, dnnl_dim_t ldc);
+
+void DNNL_API dnnl_cvt_float_to_bfloat16(dnnl_bfloat16_t *out, const float *inp, size_t nelems);
+void DNNL_API dnnl_cvt_bfloat16_to_float(float *out, const dnnl_bfloat16_t *inp, size_t nelems);
+
+// performs element-by-element sum of inp and add float arrays and stores
+// result to bfloat16 out array with downconversion
+// out[:] = (dnnl_bfloat16_t)(inp0[:] + inp1[:])
+void DNNL_API dnnl_add_floats_and_cvt_to_bfloat16(
+        dnnl_bfloat16_t *out, const float *inp0, const float *inp1, size_t nelems);
+
+void DNNL_API dnnl_cvt_float_to_float16(dnnl_float16_t *out, const float *inp, size_t nelems);
+
+void DNNL_API dnnl_cvt_float16_to_float(float *out, const dnnl_float16_t *inp, size_t nelems);
+
+// performs element-by-element sum of inp and add float arrays and stores
+// result to float16 out array with downconversion
+// out[:] = (dnnl_float16_t)(inp0[:] + inp1[:])
+void DNNL_API dnnl_add_floats_and_cvt_to_float16(
+        dnnl_float16_t *out, const float *inp0, const float *inp1, size_t nelems);
+
 /// @} dnnl_api_blas
 
 /// @} dnnl_api
diff --git a/include/oneapi/dnnl/dnnl.hpp b/include/oneapi/dnnl/dnnl.hpp
index dd7407549..4cf0fe3fa 100644
--- a/include/oneapi/dnnl/dnnl.hpp
+++ b/include/oneapi/dnnl/dnnl.hpp
@@ -12777,6 +12777,47 @@ inline status gemm_s8s8s32(char transa, char transb, char offsetc, dnnl_dim_t M,
             K, alpha, A, lda, ao, B, ldb, bo, beta, C, ldc, co));
 }
 
+/// @copydoc gemm_bf16bf16f32()
+inline status gemm_bf16bf16f32(char transa, char transb, dnnl_dim_t M, dnnl_dim_t N,
+        dnnl_dim_t K, float alpha, const dnnl_bfloat16_t *A, dnnl_dim_t lda,
+        const dnnl_bfloat16_t *B, dnnl_dim_t ldb, float beta, float *C, dnnl_dim_t ldc) {
+    return static_cast<status>(dnnl_gemm_bf16bf16f32(
+            transa, transb, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc));
+}
+
+/// @copydoc cvt_float_to_bfloat16()
+inline void cvt_float_to_bfloat16(dnnl_bfloat16_t *out, const float *inp, size_t nelems) {
+    dnnl_cvt_float_to_bfloat16(out, inp, nelems);
+}
+
+/// @copydoc cvt_bfloat16_to_float()
+inline void cvt_bfloat16_to_float(float *out, const dnnl_bfloat16_t *inp, size_t nelems) {
+    dnnl_cvt_bfloat16_to_float(out, inp, nelems);
+}
+
+/// @copydoc add_floats_and_cvt_to_bfloat16()
+inline void add_floats_and_cvt_to_bfloat16(
+        dnnl_bfloat16_t *out, const float *inp0, const float *inp1, size_t nelems) {
+    dnnl_add_floats_and_cvt_to_bfloat16(out, inp0, inp1, nelems);
+}
+
+/// @copydoc cvt_float_to_float16()
+inline void cvt_float_to_float16(dnnl_float16_t *out, const float *inp, size_t nelems) {
+    dnnl_cvt_float_to_float16(out, inp, nelems);
+}
+
+/// @copydoc cvt_float16_to_float()
+inline void cvt_float16_to_float(float *out, const dnnl_float16_t *inp, size_t nelems) {
+    dnnl_cvt_float16_to_float(out, inp, nelems);
+}
+
+/// @copydoc add_floats_and_cvt_to_float16()
+inline void add_floats_and_cvt_to_float16(
+        dnnl_float16_t *out, const float *inp0, const float *inp1, size_t nelems) {
+    dnnl_add_floats_and_cvt_to_float16(out, inp0, inp1, nelems);
+}
+
+
 /// @} dnnl_api_blas
 
 // implementation section
diff --git a/include/oneapi/dnnl/dnnl_threadpool.h b/include/oneapi/dnnl/dnnl_threadpool.h
index d6110930c..1098674f6 100644
--- a/include/oneapi/dnnl/dnnl_threadpool.h
+++ b/include/oneapi/dnnl/dnnl_threadpool.h
@@ -105,6 +105,14 @@ dnnl_status_t DNNL_API dnnl_threadpool_interop_gemm_s8s8s32(char transa,
         const int8_t *B, dnnl_dim_t ldb, int8_t bo, float beta, int32_t *C,
         dnnl_dim_t ldc, const int32_t *co, void *threadpool);
 
+/// @copydoc dnnl_gemm_bf16bf16f32()
+/// @param threadpool A pointer to a threadpool interface (only when built with
+///     the THREADPOOL CPU runtime).
+dnnl_status_t DNNL_API dnnl_threadpool_interop_gemm_bf16bf16f32(char transa, char transb,
+        dnnl_dim_t M, dnnl_dim_t N, dnnl_dim_t K, float alpha, const dnnl_bfloat16_t *A,
+        dnnl_dim_t lda, const dnnl_bfloat16_t *B, dnnl_dim_t ldb, float beta, float *C,
+        dnnl_dim_t ldc, void *threadpool);
+
 /// @} dnnl_api_threadpool_interop
 
 /// @} dnnl_api_interop
diff --git a/include/oneapi/dnnl/dnnl_threadpool.hpp b/include/oneapi/dnnl/dnnl_threadpool.hpp
index e3ebd0ff2..be080e997 100644
--- a/include/oneapi/dnnl/dnnl_threadpool.hpp
+++ b/include/oneapi/dnnl/dnnl_threadpool.hpp
@@ -100,6 +100,16 @@ inline status gemm_s8s8s32(char transa, char transb, char offsetc, dnnl_dim_t M,
             ldc, co, threadpool));
 }
 
+/// @copydoc dnnl_threadpool_interop_gemm_bf16bf16f32()
+inline status gemm_bf16bf16f32(char transa, char transb, dnnl_dim_t M, dnnl_dim_t N,
+        dnnl_dim_t K, float alpha, const bfloat16_t *A, dnnl_dim_t lda,
+        const bfloat16_t *B, dnnl_dim_t ldb, float beta, float *C, dnnl_dim_t ldc,
+        threadpool_iface *threadpool) {
+    return static_cast<status>(
+            dnnl_threadpool_interop_gemm_bf16bf16f32(
+            transa, transb, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc, threadpool));
+}
+
 } // namespace threadpool_interop
 
 /// @} dnnl_api_threadpool_interop
diff --git a/include/oneapi/dnnl/dnnl_types.h b/include/oneapi/dnnl/dnnl_types.h
index fb59e7640..2e7834d76 100644
--- a/include/oneapi/dnnl/dnnl_types.h
+++ b/include/oneapi/dnnl/dnnl_types.h
@@ -2609,6 +2609,20 @@ typedef enum {
     dnnl_cpu_isa_prefer_ymm = 0x1,
 } dnnl_cpu_isa_hints_t;
 
+/// @struct bfloat16_t
+/// An opaque structure to describe a memory.
+struct bfloat16_t;
+
+/// A bfloat16_t handle.
+typedef struct bfloat16_t dnnl_bfloat16_t;
+
+/// @struct float16_t
+/// An opaque structure to describe a memory.
+struct float16_t;
+
+/// A float16_t handle.
+typedef struct float16_t dnnl_float16_t;
+
 /// @} dnnl_api_service
 
 /// @} dnnl_api
diff --git a/src/common/bfloat16.cpp b/src/common/bfloat16.cpp
index 6ad50f084..422fb3c44 100644
--- a/src/common/bfloat16.cpp
+++ b/src/common/bfloat16.cpp
@@ -16,14 +16,11 @@
 
 #include "common/bfloat16.hpp"
 
-namespace dnnl {
-namespace impl {
-
 bfloat16_t &bfloat16_t::operator=(float f) {
 #if DNNL_CPU_RUNTIME != DNNL_RUNTIME_NONE
     if (try_cvt_float_to_bfloat16(this, &f)) { return *this; }
 #endif
-    auto iraw = utils::bit_cast<std::array<uint16_t, 2>>(f);
+    auto iraw = dnnl::impl::utils::bit_cast<std::array<uint16_t, 2>>(f);
     switch (std::fpclassify(f)) {
         case FP_SUBNORMAL:
         case FP_ZERO:
@@ -41,8 +38,8 @@ bfloat16_t &bfloat16_t::operator=(float f) {
             // round to nearest even and truncate
             const uint32_t rounding_bias = 0x00007FFF + (iraw[1] & 0x1);
             const uint32_t int_raw
-                    = utils::bit_cast<uint32_t>(f) + rounding_bias;
-            iraw = utils::bit_cast<std::array<uint16_t, 2>>(int_raw);
+                    = dnnl::impl::utils::bit_cast<uint32_t>(f) + rounding_bias;
+            iraw = dnnl::impl::utils::bit_cast<std::array<uint16_t, 2>>(int_raw);
             raw_bits_ = iraw[1];
             break;
     }
@@ -52,8 +49,5 @@ bfloat16_t &bfloat16_t::operator=(float f) {
 
 bfloat16_t::operator float() const {
     std::array<uint16_t, 2> iraw = {{0, raw_bits_}};
-    return utils::bit_cast<float>(iraw);
+    return dnnl::impl::utils::bit_cast<float>(iraw);
 }
-
-} // namespace impl
-} // namespace dnnl
diff --git a/src/common/bfloat16.hpp b/src/common/bfloat16.hpp
index 20fe0f5b0..1629cf86b 100644
--- a/src/common/bfloat16.hpp
+++ b/src/common/bfloat16.hpp
@@ -29,9 +29,6 @@
 
 #include "oneapi/dnnl/dnnl.h"
 
-namespace dnnl {
-namespace impl {
-
 #if DNNL_CPU_RUNTIME != DNNL_RUNTIME_NONE
 struct bfloat16_t;
 bool try_cvt_float_to_bfloat16(bfloat16_t *out, const float *inp);
@@ -48,7 +45,7 @@ struct bfloat16_t {
                     std::is_integral<IntegerType>::value>::type>
     bfloat16_t(const IntegerType i)
         : raw_bits_ {convert_bits_of_normal_or_zero(
-                utils::bit_cast<uint32_t>(static_cast<float>(i)))} {}
+                dnnl::impl::utils::bit_cast<uint32_t>(static_cast<float>(i)))} {}
 
     bfloat16_t DNNL_API &operator=(float f);
 
@@ -89,7 +86,11 @@ void cvt_bfloat16_to_float(float *out, const bfloat16_t *inp, size_t nelems);
 void add_floats_and_cvt_to_bfloat16(
         bfloat16_t *out, const float *inp0, const float *inp1, size_t nelems);
 
-} // namespace impl
-} // namespace dnnl
+void dnnl_cvt_float_to_bfloat16(bfloat16_t *out, const float *inp, size_t nelems);
+
+void dnnl_cvt_bfloat16_to_float(float *out, const bfloat16_t *inp, size_t nelems);
+
+void dnnl_add_floats_and_cvt_to_bfloat16(
+        bfloat16_t *out, const float *inp0, const float *inp1, size_t nelems);
 
 #endif
diff --git a/src/common/float16.hpp b/src/common/float16.hpp
index 0b7cfb29a..4665f5ecd 100644
--- a/src/common/float16.hpp
+++ b/src/common/float16.hpp
@@ -23,9 +23,7 @@
 #include <type_traits>
 
 #include "bit_cast.hpp"
-
-namespace dnnl {
-namespace impl {
+#include "oneapi/dnnl/dnnl.h"
 
 struct float16_t {
     uint16_t raw;
@@ -49,7 +47,7 @@ struct float16_t {
 static_assert(sizeof(float16_t) == 2, "float16_t must be 2 bytes");
 
 inline float16_t &float16_t::operator=(float f) {
-    uint32_t i = utils::bit_cast<uint32_t>(f);
+    uint32_t i = dnnl::impl::utils::bit_cast<uint32_t>(f);
     uint32_t s = i >> 31;
     uint32_t e = (i >> 23) & 0xFF;
     uint32_t m = i & 0x7FFFFF;
@@ -87,7 +85,7 @@ inline float16_t &float16_t::operator=(float f) {
     } else {
         // Underflow.
         float ff = fabsf(f) + 0.5;
-        uint32_t ii = utils::bit_cast<uint32_t>(ff);
+        uint32_t ii = dnnl::impl::utils::bit_cast<uint32_t>(ff);
         ee = 0;
         mm = ii & 0x7FF;
     }
@@ -121,7 +119,7 @@ inline float16_t::operator float() const {
 
     uint32_t f = (s << 31) | (e << 23) | m;
 
-    return utils::bit_cast<float>(f);
+    return dnnl::impl::utils::bit_cast<float>(f);
 }
 
 void cvt_float_to_float16(float16_t *out, const float *inp, size_t nelems);
@@ -133,7 +131,9 @@ void cvt_float16_to_float(float *out, const float16_t *inp, size_t nelems);
 void add_floats_and_cvt_to_float16(
         float16_t *out, const float *inp0, const float *inp1, size_t nelems);
 
-} // namespace impl
-} // namespace dnnl
+void dnnl_cvt_float_to_float16(float16_t *out, const float *inp, size_t nelems);
+void dnnl_cvt_float16_to_float(float *out, const float16_t *inp, size_t nelems);
+void dnnl_add_floats_and_cvt_to_float16(
+        float16_t *out, const float *inp0, const float *inp1, size_t nelems);
 
 #endif
diff --git a/src/common/gemm.cpp b/src/common/gemm.cpp
index e874b66a8..ca1131f2d 100644
--- a/src/common/gemm.cpp
+++ b/src/common/gemm.cpp
@@ -144,7 +144,7 @@ dnnl_status_t dnnl_gemm_s8s8s32(char transa, char transb, char offsetc, dim_t M,
 #endif
 }
 
-extern "C" dnnl_status_t DNNL_API dnnl_gemm_bf16bf16f32(char transa,
+dnnl_status_t dnnl_gemm_bf16bf16f32(char transa,
         char transb, dim_t M, dim_t N, dim_t K, float alpha,
         const bfloat16_t *A, dim_t lda, const bfloat16_t *B, dim_t ldb,
         float beta, float *C, dim_t ldc) {
@@ -208,7 +208,7 @@ dnnl_status_t dnnl_threadpool_interop_gemm_s8s8s32(char transa, char transb,
     return status;
 }
 
-extern "C" dnnl_status_t DNNL_API dnnl_threadpool_interop_gemm_bf16bf16f32(
+dnnl_status_t dnnl_threadpool_interop_gemm_bf16bf16f32(
         char transa, char transb, dim_t M, dim_t N, dim_t K, float alpha,
         const bfloat16_t *A, dim_t lda, const bfloat16_t *B, dim_t ldb,
         float beta, float *C, dim_t ldc, void *th) {
diff --git a/src/common/type_helpers.hpp b/src/common/type_helpers.hpp
index 1a473446b..9ac30e2ae 100644
--- a/src/common/type_helpers.hpp
+++ b/src/common/type_helpers.hpp
@@ -320,25 +320,25 @@ inline void cvt_to_float(float *out, const data_t *inp, size_t nelems) {
 template <>
 inline void cvt_from_float<bfloat16_t>(
         bfloat16_t *out, const float *inp, size_t nelems) {
-    cvt_float_to_bfloat16(out, inp, nelems);
+    dnnl_cvt_float_to_bfloat16(out, inp, nelems);
 }
 
 template <>
 inline void cvt_to_float<bfloat16_t>(
         float *out, const bfloat16_t *inp, size_t nelems) {
-    cvt_bfloat16_to_float(out, inp, nelems);
+    dnnl_cvt_bfloat16_to_float(out, inp, nelems);
 }
 
 template <>
 inline void cvt_from_float<float16_t>(
         float16_t *out, const float *inp, size_t nelems) {
-    cvt_float_to_float16(out, inp, nelems);
+    dnnl_cvt_float_to_float16(out, inp, nelems);
 }
 
 template <>
 inline void cvt_to_float<float16_t>(
         float *out, const float16_t *inp, size_t nelems) {
-    cvt_float16_to_float(out, inp, nelems);
+    dnnl_cvt_float16_to_float(out, inp, nelems);
 }
 
 inline void cvt_from_float(
diff --git a/src/cpu/bfloat16.cpp b/src/cpu/bfloat16.cpp
index 3a1357c93..0aec74716 100644
--- a/src/cpu/bfloat16.cpp
+++ b/src/cpu/bfloat16.cpp
@@ -29,8 +29,7 @@
 #include "cpu/x64/jit_uni_convert_xf16.hpp"
 #endif
 
-namespace dnnl {
-namespace impl {
+using namespace dnnl::impl;
 
 bool try_cvt_float_to_bfloat16(bfloat16_t *out, const float *inp) {
 
@@ -105,5 +104,15 @@ void add_floats_and_cvt_to_bfloat16(
         out[i] = inp0[i] + inp1[i];
 }
 
-} // namespace impl
-} // namespace dnnl
+void dnnl_cvt_float_to_bfloat16(bfloat16_t *out, const float *inp, size_t nelems) {
+    cvt_float_to_bfloat16(out, inp, nelems);
+}
+
+void dnnl_cvt_bfloat16_to_float(float *out, const bfloat16_t *inp, size_t nelems) {
+    cvt_bfloat16_to_float(out, inp, nelems);
+}
+
+void dnnl_add_floats_and_cvt_to_bfloat16(
+        bfloat16_t *out, const float *inp0, const float *inp1, size_t nelems) {
+    add_floats_and_cvt_to_bfloat16(out, inp0, inp1, nelems);
+}
diff --git a/src/cpu/float16.cpp b/src/cpu/float16.cpp
index 90968c1a9..c57e069df 100644
--- a/src/cpu/float16.cpp
+++ b/src/cpu/float16.cpp
@@ -24,12 +24,10 @@
 #include "cpu/x64/jit_uni_convert_xf16.hpp"
 #endif
 
-namespace dnnl {
-namespace impl {
-
 bool try_cvt_float_to_float16(float16_t *out, const float *inp) {
 #if DNNL_X64
-    using namespace cpu::x64;
+    using namespace dnnl::impl::cpu::x64;
+    using namespace dnnl::impl;
     if (mayiuse(avx512_core_fp16) || mayiuse(avx2_vnni_2)) {
         cvt_xf16_support::jit_call_t p;
         p.inp = (void *)inp;
@@ -44,7 +42,8 @@ bool try_cvt_float_to_float16(float16_t *out, const float *inp) {
 
 void cvt_float_to_float16(float16_t *out, const float *inp, size_t nelems) {
 #if DNNL_X64
-    using namespace cpu::x64;
+    using namespace dnnl::impl::cpu::x64;
+    using namespace dnnl::impl;
     if (mayiuse(avx512_core_fp16) || mayiuse(avx2_vnni_2)) {
         cvt_xf16_support::jit_call_t p_;
         p_.inp = (void *)inp;
@@ -63,7 +62,8 @@ void cvt_float_to_float16(float16_t *out, const float *inp, size_t nelems) {
 
 void cvt_float16_to_float(float *out, const float16_t *inp, size_t nelems) {
 #if DNNL_X64
-    using namespace cpu::x64;
+    using namespace dnnl::impl::cpu::x64;
+    using namespace dnnl::impl;
     if (mayiuse(avx512_core_fp16) || mayiuse(avx2_vnni_2)) {
         static const jit_cvt_xf16_to_ps_t kernel(data_type::f16, false);
         return kernel(out, inp, nelems);
@@ -78,6 +78,8 @@ void cvt_float16_to_float(float *out, const float16_t *inp, size_t nelems) {
 void add_floats_and_cvt_to_float16(
         float16_t *out, const float *inp0, const float *inp1, size_t nelems) {
 #if DNNL_X64
+    using namespace dnnl::impl::cpu::x64;
+    using namespace dnnl::impl;
     if (cpu::x64::mayiuse(cpu::x64::cpu_isa_t::avx512_core_fp16)) {
         cpu::x64::f16_support::jit_call_t p_;
         p_.inp = (void *)inp0;
@@ -96,5 +98,15 @@ void add_floats_and_cvt_to_float16(
         out[i] = static_cast<float16_t>(inp0[i] + inp1[i]);
 }
 
-} // namespace impl
-} // namespace dnnl
+void dnnl_cvt_float_to_float16(float16_t *out, const float *inp, size_t nelems) {
+    cvt_float_to_float16(out, inp, nelems);
+}
+
+void dnnl_cvt_float16_to_float(float *out, const float16_t *inp, size_t nelems) {
+    cvt_float16_to_float(out, inp, nelems);
+}
+
+void dnnl_add_floats_and_cvt_to_float16(
+        float16_t *out, const float *inp0, const float *inp1, size_t nelems) {
+    add_floats_and_cvt_to_float16(out, inp0, inp1, nelems);
+}
diff --git a/tests/benchdnn/dnnl_common.cpp b/tests/benchdnn/dnnl_common.cpp
index 644027cc1..381705884 100644
--- a/tests/benchdnn/dnnl_common.cpp
+++ b/tests/benchdnn/dnnl_common.cpp
@@ -234,8 +234,8 @@ float round_to_nearest_representable(dnnl_data_type_t dt, float value) {
     switch (dt) {
         case dnnl_f32: break;
         case dnnl_f64: break;
-        case dnnl_bf16: value = (float)dnnl::impl::bfloat16_t(value); break;
-        case dnnl_f16: value = (float)dnnl::impl::float16_t(value); break;
+        case dnnl_bf16: value = (float)bfloat16_t(value); break;
+        case dnnl_f16: value = (float)float16_t(value); break;
         case dnnl_s32:
         case dnnl_s8:
         case dnnl_u8: value = maybe_saturate(dt, value); break;
diff --git a/tests/benchdnn/dnnl_common.hpp b/tests/benchdnn/dnnl_common.hpp
index d25ef0e65..21ce9256e 100644
--- a/tests/benchdnn/dnnl_common.hpp
+++ b/tests/benchdnn/dnnl_common.hpp
@@ -76,8 +76,6 @@ int check_primitive_cache(dnnl_primitive_t p);
     } while (0)
 
 /* aux */
-using bfloat16_t = dnnl::impl::bfloat16_t;
-using float16_t = dnnl::impl::float16_t;
 template <dnnl_data_type_t>
 struct prec_traits;
 template <>
diff --git a/tests/gtests/dnnl_test_common.hpp b/tests/gtests/dnnl_test_common.hpp
index ffa3a5e1c..01e7e22f8 100644
--- a/tests/gtests/dnnl_test_common.hpp
+++ b/tests/gtests/dnnl_test_common.hpp
@@ -66,9 +66,6 @@
 
 #define for_ for
 
-using dnnl::impl::bfloat16_t;
-using dnnl::impl::float16_t;
-
 #ifdef DNNL_ENABLE_MEM_DEBUG
 #define DNNL_CHECK(f) \
     do { \
diff --git a/tests/gtests/test_gemm_common.hpp b/tests/gtests/test_gemm_common.hpp
index ecc0b5af6..aa0b7d3c9 100644
--- a/tests/gtests/test_gemm_common.hpp
+++ b/tests/gtests/test_gemm_common.hpp
@@ -63,14 +63,6 @@
     CPU_INST_TEST_CASE_( \
             CONCAT_WITH_UNDERSCORE(str, TEST_CASE_NAME_PREFIX), __VA_ARGS__)
 
-// Declare bfloat16 GEMM interfaces for testing
-extern "C" {
-dnnl_status_t dnnl_gemm_bf16bf16f32(char transa, char transb, dnnl_dim_t M,
-        dnnl_dim_t N, dnnl_dim_t K, float alpha, const bfloat16_t *A,
-        dnnl_dim_t lda, const bfloat16_t *B, dnnl_dim_t ldb, float beta,
-        float *C, dnnl_dim_t ldc);
-}
-
 // Declare packed GEMM interfaces for testing
 #include "src/cpu/gemm/gemm_pack.hpp"
 
