diff --git a/src/common/dnnl_thread.hpp b/src/common/dnnl_thread.hpp
index f0cd141ec..9f273a1fb 100644
--- a/src/common/dnnl_thread.hpp
+++ b/src/common/dnnl_thread.hpp
@@ -109,6 +109,34 @@ inline void dnnl_thr_barrier() {
 }
 #endif
 
+/* The purpose of this function is to provide the number of threads the library
+ * is aware of when this function is invoked. Since oneDNN does not allow nested
+ * parallelism, inside a parallel region the number of available threads is 1.
+ * Otherwise, the number of current threads varies between threading runtimes:
+ * - for OpenMP and TBB, return the max number of threads since the number of
+ *   threads is held in a global object throughout the entire execution.
+ * - for Threadpool, since the global object in oneDNN changes throughout
+ *   execution, two situations can occur:
+ *   a) if the library *is* aware of a threadpool when this function is invoked,
+ *   return the number of available threads in the threadpool;
+ *   b) if the library *is not* aware of a threadpool when this function is
+ *   invoked, return 1 since the main thread will do the work.
+ */
+inline int dnnl_get_current_num_threads() {
+    if (dnnl_in_parallel()) return 1;
+#if DNNL_CPU_THREADING_RUNTIME == DNNL_RUNTIME_OMP
+    return omp_get_max_threads();
+#elif DNNL_CPU_THREADING_RUNTIME == DNNL_RUNTIME_TBB
+    return tbb::this_task_arena::max_concurrency();
+#elif DNNL_CPU_THREADING_RUNTIME == DNNL_RUNTIME_THREADPOOL
+    using namespace dnnl::impl::threadpool_utils;
+    dnnl::threadpool_interop::threadpool_iface *tp = get_active_threadpool();
+    return (tp) ? dnnl_get_max_threads() : 1;
+#else
+    return 1;
+#endif
+}
+
 #if DNNL_CPU_THREADING_RUNTIME == DNNL_RUNTIME_OMP
 #define PRAGMA_OMP(...) PRAGMA_MACRO(CHAIN2(omp, __VA_ARGS__))
 #define OMP_GET_THREAD_NUM() omp_get_thread_num()
diff --git a/src/cpu/gemm/f32/gemm_utils_f32.cpp b/src/cpu/gemm/f32/gemm_utils_f32.cpp
index a6af9accc..d49e6764a 100644
--- a/src/cpu/gemm/f32/gemm_utils_f32.cpp
+++ b/src/cpu/gemm/f32/gemm_utils_f32.cpp
@@ -40,6 +40,18 @@ namespace gemm_utils {
 void calc_nthr_nocopy_avx(dim_t m, dim_t n, dim_t k, int nthrs, int *nthrs_m,
         int *nthrs_n, int *nthrs_k, dim_t *BM, dim_t *BN, dim_t *BK) {
 
+    // Quick exit for single thread.
+    if (nthrs == 1) {
+        *nthrs_m = 1;
+        *nthrs_n = 1;
+        *nthrs_k = 1;
+
+        *BM = m;
+        *BN = n;
+        *BK = k;
+        return;
+    }
+
     int nthr, nthr_m, nthr_n, nthr_k;
     dim_t MB, NB, KB;
 
@@ -146,6 +158,18 @@ void calc_nthr_nocopy_avx512_common(dim_t m, dim_t n, dim_t k, int nthrs,
         int *nthrs_m, int *nthrs_n, int *nthrs_k, dim_t *BM, dim_t *BN,
         dim_t *BK) {
 
+    // Quick exit for single thread.
+    if (nthrs == 1) {
+        *nthrs_m = 1;
+        *nthrs_n = 1;
+        *nthrs_k = 1;
+
+        *BM = m;
+        *BN = n;
+        *BK = k;
+        return;
+    }
+
     int nthr, nthr_m, nthr_n, nthr_k = 1;
     dim_t MB, NB, KB;
     nthr = nthrs;
diff --git a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
index 4ffcccb0a..5978d4e0e 100644
--- a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
+++ b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.cpp
@@ -1763,7 +1763,7 @@ const xbyak_gemm *get_xbyak_gemm(
     return kernel_table[isTransA][isTransB][hasBias][beta_idx(beta)];
 }
 
-void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
+dnnl_status_t sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         dim_t n, dim_t k, const float *alpha, const float *a, dim_t lda,
         const float *b, dim_t ldb, const float *beta, float *c, dim_t ldc,
         const float *bias, float *ws) {
@@ -1775,7 +1775,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
 
     dim_t i, j;
 
-    if ((m <= 0) || (n <= 0)) return;
+    if ((m <= 0) || (n <= 0)) return dnnl_success;
 
     if ((k <= 0) || (alpha[0] == 0.)) {
 
@@ -1789,7 +1789,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
                     c[i + j * ldc] *= beta[0];
         }
 
-        return;
+        return dnnl_success;
     }
 
     assert(IMPLICATION(bias != nullptr, *beta == 0.0));
@@ -1799,7 +1799,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
     auto ker_bn = get_xbyak_gemm(isTransA, isTransB, *beta, hasBias);
     auto ker_b1 = get_xbyak_gemm(isTransA, isTransB, 1.0, false);
     auto ker_b0 = get_xbyak_gemm(isTransA, isTransB, 0.0, false);
-    assert(ker_bn && ker_b1 && ker_b0);
+    if (utils::any_null(ker_bn, ker_b1, ker_b0)) return dnnl_runtime_error;
 
     dim_t BM = 4032, BN, BK;
     if (mayiuse(avx512_core)) {
@@ -1870,15 +1870,17 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         }
     }
     msan_unpoison_matrix(c, m, n, ldc, sizeof(*c));
+
+    return dnnl_success;
 }
 
 } // namespace avx512_common_gemm_f32
 
-dnnl_status_t jit_avx512_common_gemm_f32(const char *transa, const char *transb,
-        const dim_t *p_m, const dim_t *p_n, const dim_t *p_k,
-        const float *p_alpha, const float *A, const dim_t *p_lda,
-        const float *B, const dim_t *p_ldb, const float *p_beta, float *C,
-        const dim_t *p_ldc, const float *bias) {
+dnnl_status_t jit_avx512_common_gemm_f32(int nthrs, const char *transa,
+        const char *transb, const dim_t *p_m, const dim_t *p_n,
+        const dim_t *p_k, const float *p_alpha, const float *A,
+        const dim_t *p_lda, const float *B, const dim_t *p_ldb,
+        const float *p_beta, float *C, const dim_t *p_ldc, const float *bias) {
 
     using namespace dnnl::impl::utils;
     using namespace avx512_common_gemm_f32;
@@ -1888,7 +1890,8 @@ dnnl_status_t jit_avx512_common_gemm_f32(const char *transa, const char *transb,
         return ref_gemm(transa, transb, p_m, p_n, p_k, p_alpha, A, p_lda, B,
                 p_lda, p_beta, C, p_ldc, bias);
 
-    int nthr_to_use = (dnnl_in_parallel()) ? 1 : dnnl_get_max_threads();
+    int nthr_max = dnnl_get_current_num_threads();
+    int nthr_to_use = nstl::min(nthrs, nthr_max);
 
     dim_t m = *p_m;
     dim_t n = *p_n;
@@ -1951,6 +1954,10 @@ dnnl_status_t jit_avx512_common_gemm_f32(const char *transa, const char *transb,
         }
     }
 
+    if (nthr_to_use == 1)
+        return sgemm_nocopy_driver(transa, transb, m, n, k, p_alpha, A, lda, B,
+                ldb, p_beta, C, ldc, bias, ws_buffers);
+
     parallel(nthr_to_use, [&](int ithr, int nthr) {
         assert(nthr == nthr_to_use);
         MAYBE_UNUSED(nthr);
diff --git a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.hpp b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.hpp
index 500902ca3..aa8025e23 100644
--- a/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.hpp
+++ b/src/cpu/x64/gemm/f32/jit_avx512_common_gemm_f32.hpp
@@ -26,15 +26,15 @@ namespace impl {
 namespace cpu {
 namespace x64 {
 
-dnnl_status_t jit_avx512_common_gemm_f32(const char *transa, const char *transb,
-        const dim_t *M, const dim_t *N, const dim_t *K, const float *alpha,
-        const float *A, const dim_t *lda, const float *B, const dim_t *ldb,
-        const float *beta, float *C, const dim_t *ldc,
+dnnl_status_t jit_avx512_common_gemm_f32(int nthrs, const char *transa,
+        const char *transb, const dim_t *M, const dim_t *N, const dim_t *K,
+        const float *alpha, const float *A, const dim_t *lda, const float *B,
+        const dim_t *ldb, const float *beta, float *C, const dim_t *ldc,
         const float *bias = nullptr);
 
 namespace avx512_common_gemm_f32 {
 
-void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
+dnnl_status_t sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         dim_t n, dim_t k, const float *alpha, const float *a, dim_t lda,
         const float *b, dim_t ldb, const float *beta, float *c, dim_t ldc,
         const float *bias, float *ws);
diff --git a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
index b2ecffb94..5efae038c 100644
--- a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
+++ b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.cpp
@@ -2349,7 +2349,7 @@ const xbyak_gemm *get_xbyak_gemm(
     return kernel_table[isTransA][isTransB][hasBias][beta_idx(beta)];
 }
 
-void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
+dnnl_status_t sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         dim_t n, dim_t k, const float *alpha, const float *a, dim_t lda,
         const float *b, dim_t ldb, const float *beta, float *c, dim_t ldc,
         const float *bias, float *ws) {
@@ -2361,7 +2361,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
 
     dim_t i, j;
 
-    if ((m <= 0) || (n <= 0)) return;
+    if ((m <= 0) || (n <= 0)) return dnnl_success;
 
     if ((k <= 0) || (alpha[0] == 0.)) {
 
@@ -2375,7 +2375,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
                     c[i + j * ldc] *= beta[0];
         }
 
-        return;
+        return dnnl_success;
     }
 
     assert(IMPLICATION(bias != nullptr, *beta == 0.0));
@@ -2385,7 +2385,7 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
     auto ker_bn = get_xbyak_gemm(isTransA, isTransB, *beta, hasBias);
     auto ker_b1 = get_xbyak_gemm(isTransA, isTransB, 1.0, false);
     auto ker_b0 = get_xbyak_gemm(isTransA, isTransB, 0.0, false);
-    assert(ker_bn && ker_b1 && ker_b0);
+    if (utils::any_null(ker_bn, ker_b1, ker_b0)) return dnnl_runtime_error;
 
     dim_t BM = 4032;
     dim_t BN = isTransA ? 96 : 48;
@@ -2450,15 +2450,17 @@ void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         }
     }
     msan_unpoison_matrix(c, m, n, ldc, sizeof(*c));
+
+    return dnnl_success;
 }
 
 } // namespace avx_gemm_f32
 
-dnnl_status_t jit_avx_gemm_f32(const char *transa, const char *transb,
-        const dim_t *p_m, const dim_t *p_n, const dim_t *p_k,
-        const float *p_alpha, const float *A, const dim_t *p_lda,
-        const float *B, const dim_t *p_ldb, const float *p_beta, float *C,
-        const dim_t *p_ldc, const float *bias) {
+dnnl_status_t jit_avx_gemm_f32(int nthrs, const char *transa,
+        const char *transb, const dim_t *p_m, const dim_t *p_n,
+        const dim_t *p_k, const float *p_alpha, const float *A,
+        const dim_t *p_lda, const float *B, const dim_t *p_ldb,
+        const float *p_beta, float *C, const dim_t *p_ldc, const float *bias) {
 
     using namespace dnnl::impl::utils;
     using namespace avx_gemm_f32;
@@ -2468,7 +2470,8 @@ dnnl_status_t jit_avx_gemm_f32(const char *transa, const char *transb,
         return ref_gemm(transa, transb, p_m, p_n, p_k, p_alpha, A, p_lda, B,
                 p_lda, p_beta, C, p_ldc, bias);
 
-    int nthr_to_use = (dnnl_in_parallel()) ? 1 : dnnl_get_max_threads();
+    int nthr_max = dnnl_get_current_num_threads();
+    int nthr_to_use = nstl::min(nthrs, nthr_max);
 
     dim_t m = *p_m;
     dim_t n = *p_n;
@@ -2531,6 +2534,11 @@ dnnl_status_t jit_avx_gemm_f32(const char *transa, const char *transb,
         }
     }
 
+    if (nthr_to_use == 1) {
+        return sgemm_nocopy_driver(transa, transb, m, n, k, p_alpha, A, lda, B,
+                ldb, p_beta, C, ldc, bias, ws_buffers);
+    }
+
     parallel(nthr_to_use, [&](int ithr, int nthr) {
         assert(nthr_to_use == nthr);
         MAYBE_UNUSED(nthr);
diff --git a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.hpp b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.hpp
index 1d0e52e2e..8aecf8c9b 100644
--- a/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.hpp
+++ b/src/cpu/x64/gemm/f32/jit_avx_gemm_f32.hpp
@@ -26,15 +26,15 @@ namespace impl {
 namespace cpu {
 namespace x64 {
 
-dnnl_status_t jit_avx_gemm_f32(const char *transa, const char *transb,
-        const dim_t *M, const dim_t *N, const dim_t *K, const float *alpha,
-        const float *A, const dim_t *lda, const float *B, const dim_t *ldb,
-        const float *beta, float *C, const dim_t *ldc,
+dnnl_status_t jit_avx_gemm_f32(int nthrs, const char *transa,
+        const char *transb, const dim_t *M, const dim_t *N, const dim_t *K,
+        const float *alpha, const float *A, const dim_t *lda, const float *B,
+        const dim_t *ldb, const float *beta, float *C, const dim_t *ldc,
         const float *bias = nullptr);
 
 namespace avx_gemm_f32 {
 
-void sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
+dnnl_status_t sgemm_nocopy_driver(const char *transa, const char *transb, dim_t m,
         dim_t n, dim_t k, const float *alpha, const float *a, dim_t lda,
         const float *b, dim_t ldb, const float *beta, float *c, dim_t ldc,
         const float *bias, float *ws);
diff --git a/src/cpu/x64/gemm/gemm_driver.cpp b/src/cpu/x64/gemm/gemm_driver.cpp
index 96880e4e9..161587a61 100644
--- a/src/cpu/x64/gemm/gemm_driver.cpp
+++ b/src/cpu/x64/gemm/gemm_driver.cpp
@@ -1424,20 +1424,20 @@ static inline void adjust_thread_count(dim_t m, dim_t n, dim_t k, int *nthrs) {
 
 template <typename a_type, typename b_type, typename c_type>
 static dnnl_status_t call_no_copy_sgemm(
-        gemm_info_t<a_type, b_type, c_type> *arg) {
+        int nthrs, gemm_info_t<a_type, b_type, c_type> *arg) {
 
     if (arg->packing == pack_type::none) {
         auto transa_char = (arg->transa != do_trans) ? "N" : "T";
         auto transb_char = (arg->transb != do_trans) ? "N" : "T";
 
         if (mayiuse(avx512_core))
-            return jit_avx512_common_gemm_f32(transa_char, transb_char, &arg->m,
-                    &arg->n, &arg->k, &arg->alpha, (float *)arg->a, &arg->lda,
-                    (float *)arg->b, &arg->ldb, &arg->beta, (float *)arg->c,
-                    &arg->ldc, (float *)arg->co);
+            return jit_avx512_common_gemm_f32(nthrs, transa_char, transb_char,
+                    &arg->m, &arg->n, &arg->k, &arg->alpha, (float *)arg->a,
+                    &arg->lda, (float *)arg->b, &arg->ldb, &arg->beta,
+                    (float *)arg->c, &arg->ldc, (float *)arg->co);
         else
-            return jit_avx_gemm_f32(transa_char, transb_char, &arg->m, &arg->n,
-                    &arg->k, &arg->alpha, (float *)arg->a, &arg->lda,
+            return jit_avx_gemm_f32(nthrs, transa_char, transb_char, &arg->m,
+                    &arg->n, &arg->k, &arg->alpha, (float *)arg->a, &arg->lda,
                     (float *)arg->b, &arg->ldb, &arg->beta, (float *)arg->c,
                     &arg->ldc, (float *)arg->co);
     } else
@@ -1557,7 +1557,8 @@ static dnnl_status_t gemm_threading_driver(
         if (arg->measure_only) return dnnl_success;
     }
 
-    if (nocopy_checker(nthr_goal, arg)) return call_no_copy_sgemm(arg);
+    if (nocopy_checker(nthr_goal, arg))
+        return call_no_copy_sgemm(nthr_goal, arg);
 
     if (nthr_goal == 1)
         return gemm_kernel_driver(0, arg->m, arg->n, arg->k, arg->a, arg->b,
